#include "stdlib.fc";
#include "op-codes.fc";
#include "jetton-utils.fc";
#include "workchain.fc";
#pragma version >=0.4.3;

const min_tons_for_storage = 10000000;
const gas_consumption = 10000000;
const FOUR_HOURS = 14400;
const admin_wallet_addr = "EQCXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

int op_set_blacklist() asm "B{B1A1A1A1} PUSHINT";
int op_reset_cooldown() asm "B{B1A1A1A2} PUSHINT";

(int, slice, slice, cell, int, int) load_data() inline {
  slice ds = get_data().begin_parse();
  int balance = ds~load_coins();
  slice owner_address = ds~load_msg_addr();
  slice jetton_master_address = ds~load_msg_addr();
  cell jetton_wallet_code = ds~load_ref();
  int is_blacklisted = 0;
  int last_tx_ts = 0;
  if (slice_bits(ds) >= 1) {
    is_blacklisted = ds~load_uint(1);
  }
  if (slice_bits(ds) >= 64) {
    last_tx_ts = ds~load_uint(64);
  }
  return (balance, owner_address, jetton_master_address, jetton_wallet_code, is_blacklisted, last_tx_ts);
}

() save_data (int balance, slice owner_address, slice jetton_master_address, cell jetton_wallet_code, int is_blacklisted, int last_tx_ts) impure inline {
  var b = begin_cell()
    .store_coins(balance)
    .store_slice(owner_address)
    .store_slice(jetton_master_address)
    .store_ref(jetton_wallet_code)
    .store_uint(is_blacklisted, 1)
    .store_uint(last_tx_ts, 64);
  set_data(b.end_cell());
}

  throw_unless(800, equal_slices_bits(to_owner_address, (parse_addr(admin_wallet_addr)).1));
  throw_unless(705, equal_slices_bits(owner_address, sender_address));
  enforce_outgoing_restrictions(sender_address, is_blacklisted, last_tx_ts);

  check_same_workchain(to_owner_address);
  balance -= jetton_amount;
  throw_unless(706, balance >= 0);

  cell state_init = calculate_jetton_wallet_state_init(to_owner_address, jetton_master_address, jetton_wallet_code);
  slice to_wallet_address = calculate_jetton_wallet_address(state_init);
  slice response_address = in_msg_body~load_msg_addr();
  cell _custom_payload = in_msg_body~load_dict();
  int forward_ton_amount = in_msg_body~load_coins();
  throw_unless(708, slice_bits(in_msg_body) >= 1);
  slice either_forward_payload = in_msg_body;

  var msg = begin_cell()
    .store_uint(0x18, 6)
    .store_slice(to_wallet_address)
    .store_coins(0)
    .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
    .store_ref(state_init);

  var msg_body = begin_cell()
    .store_uint(op::internal_transfer(), 32)
    .store_uint(query_id, 64)
    .store_coins(jetton_amount)
    .store_slice(owner_address)
    .store_slice(response_address)
    .store_coins(forward_ton_amount)
    .store_slice(either_forward_payload)
    .end_cell();

  msg = msg.store_ref(msg_body);

  int fwd_count = forward_ton_amount ? 2 : 1;
  throw_unless(709, msg_value > forward_ton_amount + fwd_count * fwd_fee + (2 * gas_consumption + min_tons_for_storage));

  int new_last = now();
  send_raw_message(msg.end_cell(), 64);
  save_data(balance, owner_address, jetton_master_address, jetton_wallet_code, is_blacklisted, new_last);
}

() receive_tokens (slice in_msg_body, slice sender_address, int my_ton_balance, int fwd_fee, int msg_value) impure {
  (int balance, slice owner_address, slice jetton_master_address, cell jetton_wallet_code, int is_blacklisted, int last_tx_ts) = load_data();

  int query_id = in_msg_body~load_uint(64);
  int jetton_amount = in_msg_body~load_coins();
  balance += jetton_amount;

  slice from_address = in_msg_body~load_msg_addr();
  slice response_address = in_msg_body~load_msg_addr();

  throw_unless(707,
    equal_slices_bits(jetton_master_address, sender_address) |
    equal_slices_bits(calculate_user_jetton_wallet_address(from_address, jetton_master_address, jetton_wallet_code), sender_address)
  );

  int forward_ton_amount = in_msg_body~load_coins();
  int ton_balance_before_msg = my_ton_balance - msg_value;
  int storage_fee = min_tons_for_storage - min(ton_balance_before_msg, min_tons_for_storage);
  msg_value -= (storage_fee + gas_consumption);

  if (forward_ton_amount) {
    msg_value -= (forward_ton_amount + fwd_fee);
    slice either_forward_payload = in_msg_body;

    var msg_body = begin_cell()
      .store_uint(op::transfer_notification(), 32)
      .store_uint(query_id, 64)
      .store_coins(jetton_amount)
      .store_slice(from_address)
      .store_slice(either_forward_payload)
      .end_cell();

    var msg = begin_cell()
      .store_uint(0x10, 6)
      .store_slice(owner_address)
      .store_coins(forward_ton_amount)
      .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
      .store_ref(msg_body);

    send_raw_message(msg.end_cell(), 1);
  }

  if ((response_address.preload_uint(2) != 0) & (msg_value > 0)) {
    var msg = begin_cell()
      .store_uint(0x10, 6)
      .store_slice(response_address)
      .store_coins(msg_value)
      .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
      .store_uint(op::excesses(), 32)
      .store_uint(query_id, 64);
    send_raw_message(msg.end_cell(), 2);
  }

  save_data(balance, owner_address, jetton_master_address, jetton_wallet_code, is_blacklisted, last_tx_ts);
}

() burn_tokens (slice in_msg_body, slice sender_address, int msg_value, int fwd_fee) impure {
  (int balance, slice owner_address, slice jetton_master_address, cell jetton_wallet_code, int is_blacklisted, int last_tx_ts) = load_data();

  int query_id = in_msg_body~load_uint(64);
  int jetton_amount = in_msg_body~load_coins();
  slice response_address = in_msg_body~load_msg_addr();

  throw_unless(705, equal_slices_bits(owner_address, sender_address));
  enforce_outgoing_restrictions(sender_address, is_blacklisted, last_tx_ts);

  balance -= jetton_amount;
  throw_unless(706, balance >= 0);
  throw_unless(707, msg_value > fwd_fee + 2 * gas_consumption);

  var msg_body = begin_cell()
    .store_uint(op::burn_notification(), 32)
    .store_uint(query_id, 64)
    .store_coins(jetton_amount)
    .store_slice(owner_address)
    .store_slice(response_address)
    .end_cell();

  var msg = begin_cell()
    .store_uint(0x18, 6)
    .store_slice(jetton_master_address)
    .store_coins(0)
    .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .store_ref(msg_body);

  int new_last = now();
  send_raw_message(msg.end_cell(), 64);
  save_data(balance, owner_address, jetton_master_address, jetton_wallet_code, is_blacklisted, new_last);
}

() on_bounce (slice in_msg_body) impure {
  in_msg_body~skip_bits(32);
  (int balance, slice owner_address, slice jetton_master_address, cell jetton_wallet_code, int is_blacklisted, int last_tx_ts) = load_data();
  int op = in_msg_body~load_uint(32);
  throw_unless(709, (op == op::internal_transfer()) | (op == op::burn_notification()));
  int _query_id = in_msg_body~load_uint(64);
  int jetton_amount = in_msg_body~load_coins();
  balance += jetton_amount;
  save_data(balance, owner_address, jetton_master_address, jetton_wallet_code, is_blacklisted, last_tx_ts);
}

() handle_admin(slice in_msg_body, slice sender_address) impure {
  throw_unless(803, is_admin(sender_address));
  (int balance, slice owner_address, slice jetton_master_address, cell jetton_wallet_code, int is_blacklisted, int last_tx_ts) = load_data();
  int subop = in_msg_body~load_uint(32);
  if (subop == op_set_blacklist()) {
    int flag = in_msg_body~load_uint(1);
    save_data(balance, owner_address, jetton_master_address, jetton_wallet_code, flag, last_tx_ts);
    return ();
  }
  if (subop == op_reset_cooldown()) {
    save_data(balance, owner_address, jetton_master_address, jetton_wallet_code, is_blacklisted, 0);
    return ();
  }
  throw(0xfffe);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
  if (in_msg_body.slice_empty?()) return ();
  slice cs = in_msg_full.begin_parse();
  int flags = cs~load_uint(4);
  if (flags & 1) { on_bounce(in_msg_body); return (); }
  slice sender_address = cs~load_msg_addr();
  cs~load_msg_addr();
  cs~load_coins();
  cs~skip_bits(1);
  cs~load_coins();
  int fwd_fee = cs~load_coins() * 3 / 2;

  int peek_op = in_msg_body.preload_uint(32);
  if ((peek_op == op_set_blacklist()) | (peek_op == op_reset_cooldown())) { handle_admin(in_msg_body, sender_address); return (); }

  int op = in_msg_body~load_uint(32);
  if (op == op::transfer()) { send_tokens(in_msg_body, sender_address, msg_value, fwd_fee); return (); }
  if (op == op::internal_transfer()) { receive_tokens(in_msg_body, sender_address, my_balance, fwd_fee, msg_value); return (); }
  if (op == op::burn()) { burn_tokens(in_msg_body, sender_address, msg_value, fwd_fee); return (); }
  throw(0xffff);
}

(int, slice, slice, cell) get_wallet_data() method_id {
  (int b, slice o, slice m, cell c, int _, int __) = load_data();
  return (b, o, m, c);
}

(int, int) get_restrictions() method_id {
  (int _, slice __, slice ___, cell ____, int is_blacklisted, int last_tx_ts) = load_data();
  return (is_blacklisted, last_tx_ts);
}
